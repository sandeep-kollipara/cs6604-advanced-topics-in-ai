# *************** Data Manipulation Tools ***************

# FUNCTION BELOW ARE PYTHON WRAPPERS AROUND SIMPLE PACKAGE FUNCTIONS AND ARE GENERATED BY CHATGPT

import pandas as pd

def groupby_aggregate(df: pd.DataFrame, group_cols: list, agg_dict: dict) -> pd.DataFrame:
    """
    Group the DataFrame by group_cols and apply aggregation from agg_dict.
    
    Args:
        df (pd.DataFrame): Input DataFrame.
        group_cols (list): Columns to group by.
        agg_dict (dict): Dictionary specifying aggregations, e.g., {'col1': 'sum', 'col2': 'mean'}
        
    Returns:
        pd.DataFrame: Aggregated DataFrame.
    """
    return df.groupby(group_cols).agg(agg_dict).reset_index()

def pivot_table(df: pd.DataFrame, index: list, columns: list, values: list, aggfunc='mean') -> pd.DataFrame:
    """
    Pivot the DataFrame based on index, columns, and values.
    
    Args:
        df (pd.DataFrame): Input DataFrame.
        index (list): Columns to use as index.
        columns (list): Columns to pivot.
        values (list): Columns to fill values.
        aggfunc (str or function): Aggregation function (default 'mean').
        
    Returns:
        pd.DataFrame: Pivoted DataFrame.
    """
    return df.pivot_table(index=index, columns=columns, values=values, aggfunc=aggfunc)

def transpose_df(df: pd.DataFrame) -> pd.DataFrame:
    """
    Transpose the DataFrame.
    
    Args:
        df (pd.DataFrame): Input DataFrame.
        
    Returns:
        pd.DataFrame: Transposed DataFrame.
    """
    return df.transpose()

def select_columns(df: pd.DataFrame, columns: list) -> pd.DataFrame:
    """
    Select specific columns from the DataFrame.
    
    Args:
        df (pd.DataFrame): Input DataFrame.
        columns (list): List of columns to select.
        
    Returns:
        pd.DataFrame: DataFrame with selected columns.
    """
    return df[columns]

def drop_columns(df: pd.DataFrame, columns: list) -> pd.DataFrame:
    """
    Drop specified columns from the DataFrame.
    
    Args:
        df (pd.DataFrame): Input DataFrame.
        columns (list): List of columns to drop.
        
    Returns:
        pd.DataFrame: DataFrame with columns dropped.
    """
    return df.drop(columns=columns)

def discretize_column(df: pd.DataFrame, column: str, cutoffs: list, labels: list = None, right: bool = True, include_lowest: bool = True) -> pd.DataFrame:
    """
    Discretize a numerical column into categorical bins using cutoffs.
    
    Args:
        df (pd.DataFrame): Input DataFrame.
        column (str): Name of the numerical column to discretize.
        cutoffs (list): List of bin edges (must be sorted).
        labels (list, optional): List of labels for the bins. If None, integers are used.
        right (bool): Indicates whether bins include the rightmost edge. Default is True.
        include_lowest (bool): Whether the first interval should be left-inclusive. Default is True.
        
    Returns:
        pd.DataFrame: DataFrame with an added discretized categorical column.
    """
    new_col_name = f"{column}_binned"
    df[new_col_name] = pd.cut(
        df[column],
        bins=cutoffs,
        labels=labels,
        right=right,
        include_lowest=include_lowest
    )
    return df

def rename_column(df: pd.DataFrame, old_name: str, new_name: str) -> pd.DataFrame:
    """
    Rename a column in the DataFrame.
    
    Args:
        df (pd.DataFrame): Input DataFrame.
        old_name (str): Existing column name to be renamed.
        new_name (str): New column name.
        
    Returns:
        pd.DataFrame: DataFrame with renamed column.
    """
    return df.rename(columns={old_name: new_name})

'''
# Define a few helper functions
def add(a: int, b: int) -> int:
    """Add two numbers together"""
    return a + b


def subtract(a: int, b: int) -> int:
    """Subtract two numbers"""
    return a - b


def multiply(a: int, b: int) -> int:
    """Multiply two numbers"""
    return a * b


def divide(a: int, b: int) -> float:
    """Divide two numbers"""
    return a / b
'''